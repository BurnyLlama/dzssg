import fs from "fs"

/**
 * A file entry in the tree.
 * If the type of an entry is `directory` then the `content` property will be an array of file entries in that directory.
 * @typedef {Object} FileEntry
 * @prop {"file"|"directory"} type
 * @prop {string} name
 * @prop {string} path
 * @prop {FileEntry[]} [content]
 */

/**
 * Creates a tree of the posts.
 * @param {string} postDir the directory where the posts are stored.
 * @returns {FileEntry[]}
 */
export function createPostsTree(postDir) {
    const files = fs.readdirSync(postDir)

    return files.map((file) => {
        const filePath = `${postDir}/${file}`
        const stat = fs.statSync(filePath)

        if (stat.isDirectory()) {
            return {
                type: "directory",
                name: file,
                path: filePath,
                content: createPostsTree(filePath)
            }
        }

        return {
            type: "file",
            name: file,
            path: filePath,
        }
    })
}

/**
 * Convert a file tree (generated by {@link createPostsTree}) into a flat array of file entries.
 * @param {FileEntry[]} tree
 * @returns {string[]}
 */
export function flattenTree(tree) {
    return tree.reduce((acc, item) => {
        if (item.type === "directory") {
            return acc.concat(flattenTree(item.content))
        }

        return acc.concat(item)
    }, [])
}
